package com.cizerautomobiles.view;

import com.cizerautomobiles.controller.BinarySearchAlgorithm;
import com.cizerautomobiles.controller.InsertionSort;
import com.cizerautomobiles.controller.SelectionSort;
import com.cizerautomobiles.model.AutomobilesModel;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

public class CarInfoDisplay extends javax.swing.JFrame {

    /**
     * Creates new form CarInfoDisplay
     */
    AutomobilesModel[] arrayForSort;

    public CarInfoDisplay() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        mainLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        autoTable = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        createDataPanel = new javax.swing.JPanel();
        carIdTextInCD = new javax.swing.JLabel();
        modelNameTextInCD = new javax.swing.JLabel();
        brandNameTextInCD = new javax.swing.JLabel();
        manufractureTextInCD = new javax.swing.JLabel();
        seatCapTextInCD = new javax.swing.JLabel();
        vinNumTextInCD = new javax.swing.JLabel();
        displacementTextInCD = new javax.swing.JLabel();
        fuelTypTextInCD = new javax.swing.JLabel();
        transmissionTypTextInCD = new javax.swing.JLabel();
        bodyTypTextInCD = new javax.swing.JLabel();
        priceTextInCD = new javax.swing.JLabel();
        modelNameTF = new javax.swing.JTextField();
        carIdTF = new javax.swing.JTextField();
        brandNameTF = new javax.swing.JTextField();
        manufacturerTF = new javax.swing.JTextField();
        seatCapacityTF = new javax.swing.JTextField();
        vinNumberTF = new javax.swing.JTextField();
        displacementTF = new javax.swing.JTextField();
        priceTF = new javax.swing.JTextField();
        fuelTypeCB = new javax.swing.JComboBox<>();
        transmissionTypeCB = new javax.swing.JComboBox<>();
        bodyTypeCB = new javax.swing.JComboBox<>();
        addRecordbtn = new javax.swing.JButton();
        updateDataPanel = new javax.swing.JPanel();
        carIdTextInCD1 = new javax.swing.JLabel();
        modelNameTextInCD1 = new javax.swing.JLabel();
        brandNameTextInCD1 = new javax.swing.JLabel();
        manufractureTextInCD1 = new javax.swing.JLabel();
        seatCapTextInCD1 = new javax.swing.JLabel();
        vinNumTextInCD1 = new javax.swing.JLabel();
        displacementTextInCD1 = new javax.swing.JLabel();
        fuelTypTextInCD1 = new javax.swing.JLabel();
        transmissionTypTextInCD1 = new javax.swing.JLabel();
        bodyTypTextInCD1 = new javax.swing.JLabel();
        priceTextInCD1 = new javax.swing.JLabel();
        modelNameTFInUD = new javax.swing.JTextField();
        carIdTFInUD = new javax.swing.JTextField();
        brandNameTFInUD = new javax.swing.JTextField();
        manufacturerTFInUD = new javax.swing.JTextField();
        seatCapacityTFInUD = new javax.swing.JTextField();
        vinNumberTFInUD = new javax.swing.JTextField();
        displacementTFInUD = new javax.swing.JTextField();
        priceTFInUD = new javax.swing.JTextField();
        fuelTypeCBInUD = new javax.swing.JComboBox<>();
        transmissionTypeCBInUD = new javax.swing.JComboBox<>();
        bodyTypeCBInUD = new javax.swing.JComboBox<>();
        updateRecordbtn = new javax.swing.JButton();
        deletePanel = new javax.swing.JPanel();
        deleteRecLabel = new javax.swing.JLabel();
        carIdTextLbl = new javax.swing.JLabel();
        carIdTFdelt = new javax.swing.JTextField();
        deleteBtn = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchColmCB = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        sortingPanel = new javax.swing.JPanel();
        sortColmCB = new javax.swing.JComboBox<>();
        sortOrderCB = new javax.swing.JComboBox<>();
        sortBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(87, 60, 250));

        mainLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        mainLabel.setForeground(new java.awt.Color(255, 255, 255));
        mainLabel.setText("Cizer Automobiles");

        autoTable.setBackground(new java.awt.Color(163, 164, 255));
        autoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "Camry", "Toyota", "Toyota Motors", "5", "JT4VN01D1R2014323",  new Integer(2487), "Petrol", "Automatic", "Sedan",  new Integer(25000)},
                { new Integer(2), "Sonata", "Hyundai", "Hyundai Motors", "5", "KMHHU6KH4B4047116",  new Integer(2494), "Petrol", "Automatic", "Sedan",  new Integer(26000)},
                { new Integer(3), "Buick", "Lesabre", "Buick Motors", "6", "5GAKRBKD0GJ997971",  new Integer(3791), "Petrol", "Automatic", "Sedan",  new Integer(8000)},
                { new Integer(4), "4runner", "Toyota", "Toyota Motors", "7", "5TFJU5F11BX004560",  new Integer(3956), "Petrol", "Automatic", "SUV",  new Integer(43000)},
                { new Integer(5), "Alcazar", "Hyundai", "Hyundai Motors", "5", "5NPET4AF4AH588982",  new Integer(1997), "Petrol", "Automatic", "Crossover",  new Integer(37000)},
                { new Integer(6), "Santa Fe", "Hyundai ", "Hyundai Motors", "5", "KMHDN45D524260648",  new Integer(2351), "Petrol", "Automatic", "SUV",  new Integer(70000)},
                { new Integer(7), "Prius", "Toyota ", "Toyota Motors", "5", "5TETX22N95Z029906",  new Integer(1986), "Hybrid", "Automatic", "Sedan",  new Integer(50000)}
            },
            new String [] {
                "car_id", "model_name", "brand_name", "manufacturer", "seat_capacity", "vin_number", "displacement", "fuel_type", "transmission_type", "body_type", "price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(autoTable);

        createDataPanel.setBackground(new java.awt.Color(163, 164, 255));

        carIdTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        carIdTextInCD.setText("Car Id");

        modelNameTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        modelNameTextInCD.setText("model name");

        brandNameTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        brandNameTextInCD.setText("brand name");

        manufractureTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        manufractureTextInCD.setText("manufracturer ");

        seatCapTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        seatCapTextInCD.setText("seat capacity");

        vinNumTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        vinNumTextInCD.setText("vin number");

        displacementTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        displacementTextInCD.setText("displacement");

        fuelTypTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fuelTypTextInCD.setText("fuel type");

        transmissionTypTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        transmissionTypTextInCD.setText("transmission type");

        bodyTypTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bodyTypTextInCD.setText("body type");

        priceTextInCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceTextInCD.setText("price");

        carIdTF.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        fuelTypeCB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fuelTypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Petrol", "Diesel", "Electric ", "Hybrid" }));

        transmissionTypeCB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        transmissionTypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manual", "DCT", "iMT", "AMT" }));

        bodyTypeCB.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        bodyTypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sedan", "HatchBack", "SUV", "Crossover", "Coupe" }));

        addRecordbtn.setBackground(new java.awt.Color(2, 134, 74));
        addRecordbtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addRecordbtn.setForeground(new java.awt.Color(255, 255, 255));
        addRecordbtn.setText("Create New");
        addRecordbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRecordbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout createDataPanelLayout = new javax.swing.GroupLayout(createDataPanel);
        createDataPanel.setLayout(createDataPanelLayout);
        createDataPanelLayout.setHorizontalGroup(
            createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createDataPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(carIdTextInCD)
                    .addComponent(brandNameTextInCD)
                    .addComponent(manufractureTextInCD)
                    .addComponent(modelNameTextInCD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manufacturerTF, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(brandNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85)
                .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createDataPanelLayout.createSequentialGroup()
                        .addComponent(addRecordbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(createDataPanelLayout.createSequentialGroup()
                        .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(displacementTextInCD)
                            .addComponent(fuelTypTextInCD)
                            .addGroup(createDataPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(vinNumTextInCD)
                                    .addComponent(seatCapTextInCD))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(displacementTF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(vinNumberTF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(seatCapacityTF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(fuelTypeCB, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(127, 127, 127)
                        .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bodyTypTextInCD)
                            .addComponent(transmissionTypTextInCD)
                            .addComponent(priceTextInCD))
                        .addGap(77, 77, 77)
                        .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priceTF, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(bodyTypeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(transmissionTypeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(46, 46, 46))))
        );
        createDataPanelLayout.setVerticalGroup(
            createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createDataPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(carIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carIdTextInCD)
                    .addComponent(seatCapTextInCD)
                    .addComponent(seatCapacityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transmissionTypTextInCD)
                    .addComponent(transmissionTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(modelNameTextInCD)
                    .addComponent(modelNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vinNumTextInCD)
                    .addComponent(vinNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bodyTypTextInCD)
                    .addComponent(bodyTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(brandNameTextInCD)
                    .addComponent(brandNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displacementTextInCD)
                    .addComponent(displacementTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTextInCD)
                    .addComponent(priceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fuelTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fuelTypTextInCD)
                    .addComponent(manufacturerTF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manufractureTextInCD))
                .addGap(18, 18, 18)
                .addComponent(addRecordbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add New", createDataPanel);

        updateDataPanel.setBackground(new java.awt.Color(163, 164, 255));

        carIdTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        carIdTextInCD1.setText("Car Id");

        modelNameTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        modelNameTextInCD1.setText("model name");

        brandNameTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        brandNameTextInCD1.setText("brand name");

        manufractureTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        manufractureTextInCD1.setText("manufracturer ");

        seatCapTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        seatCapTextInCD1.setText("seat capacity");

        vinNumTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        vinNumTextInCD1.setText("vin number");

        displacementTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        displacementTextInCD1.setText("displacement");

        fuelTypTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fuelTypTextInCD1.setText("fuel type");

        transmissionTypTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        transmissionTypTextInCD1.setText("transmission type");

        bodyTypTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bodyTypTextInCD1.setText("body type");

        priceTextInCD1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceTextInCD1.setText("price");

        carIdTFInUD.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        fuelTypeCBInUD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fuelTypeCBInUD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Petrol", "Diesel", "Electric ", "Hybrid" }));

        transmissionTypeCBInUD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        transmissionTypeCBInUD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manual", "DCT", "iMT", "AMT" }));

        bodyTypeCBInUD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        bodyTypeCBInUD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sedan", "HatchBack", "SUV", "Crossover", "Coupe", " " }));

        updateRecordbtn.setBackground(new java.awt.Color(51, 153, 255));
        updateRecordbtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateRecordbtn.setForeground(new java.awt.Color(255, 255, 255));
        updateRecordbtn.setText("Update");
        updateRecordbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRecordbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updateDataPanelLayout = new javax.swing.GroupLayout(updateDataPanel);
        updateDataPanel.setLayout(updateDataPanelLayout);
        updateDataPanelLayout.setHorizontalGroup(
            updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateDataPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(carIdTextInCD1)
                    .addComponent(brandNameTextInCD1)
                    .addComponent(manufractureTextInCD1)
                    .addComponent(modelNameTextInCD1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manufacturerTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelNameTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(brandNameTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carIdTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85)
                .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateDataPanelLayout.createSequentialGroup()
                        .addComponent(updateRecordbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(updateDataPanelLayout.createSequentialGroup()
                        .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(displacementTextInCD1)
                            .addComponent(fuelTypTextInCD1)
                            .addGroup(updateDataPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(vinNumTextInCD1)
                                    .addComponent(seatCapTextInCD1))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(displacementTFInUD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(vinNumberTFInUD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(seatCapacityTFInUD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(fuelTypeCBInUD, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(127, 127, 127)
                        .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bodyTypTextInCD1)
                            .addComponent(transmissionTypTextInCD1)
                            .addComponent(priceTextInCD1))
                        .addGap(77, 77, 77)
                        .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priceTFInUD, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(bodyTypeCBInUD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(transmissionTypeCBInUD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(46, 46, 46))))
        );
        updateDataPanelLayout.setVerticalGroup(
            updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateDataPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(carIdTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carIdTextInCD1)
                    .addComponent(seatCapTextInCD1)
                    .addComponent(seatCapacityTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transmissionTypTextInCD1)
                    .addComponent(transmissionTypeCBInUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(modelNameTextInCD1)
                    .addComponent(modelNameTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vinNumTextInCD1)
                    .addComponent(vinNumberTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bodyTypTextInCD1)
                    .addComponent(bodyTypeCBInUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(brandNameTextInCD1)
                    .addComponent(brandNameTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displacementTextInCD1)
                    .addComponent(displacementTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTextInCD1)
                    .addComponent(priceTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(updateDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fuelTypeCBInUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fuelTypTextInCD1)
                    .addComponent(manufacturerTFInUD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manufractureTextInCD1))
                .addGap(18, 18, 18)
                .addComponent(updateRecordbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Update Record", updateDataPanel);

        deletePanel.setBackground(new java.awt.Color(163, 164, 255));

        deleteRecLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteRecLabel.setText("Delete Record");

        carIdTextLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        carIdTextLbl.setText("Car Id :");

        carIdTFdelt.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        deleteBtn.setBackground(new java.awt.Color(255, 0, 0));
        deleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deletePanelLayout = new javax.swing.GroupLayout(deletePanel);
        deletePanel.setLayout(deletePanelLayout);
        deletePanelLayout.setHorizontalGroup(
            deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePanelLayout.createSequentialGroup()
                .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addGap(494, 494, 494)
                        .addComponent(carIdTextLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(carIdTFdelt, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addGap(595, 595, 595)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addGap(609, 609, 609)
                        .addComponent(deleteRecLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(630, Short.MAX_VALUE))
        );
        deletePanelLayout.setVerticalGroup(
            deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deletePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(deleteRecLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carIdTextLbl)
                    .addComponent(carIdTFdelt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Delete Record", deletePanel);

        searchPanel.setBackground(new java.awt.Color(191, 195, 255));
        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Searching"));
        searchPanel.setForeground(new java.awt.Color(204, 204, 204));

        searchColmCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Model Name", "Price" }));

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(searchColmCB, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchColmCB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        sortingPanel.setBackground(new java.awt.Color(191, 195, 255));
        sortingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sorting "));
        sortingPanel.setForeground(new java.awt.Color(204, 204, 204));

        sortColmCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Car Id - Insertion Sort", "Model Name - Selection Sort", "Brand Name - Selection Sort", "Price - Insertion Sort" }));

        sortOrderCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascend", "Descend" }));

        sortBtn.setText("Sort");
        sortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sortingPanelLayout = new javax.swing.GroupLayout(sortingPanel);
        sortingPanel.setLayout(sortingPanelLayout);
        sortingPanelLayout.setHorizontalGroup(
            sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortingPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(sortColmCB, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(sortOrderCB, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(sortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );
        sortingPanelLayout.setVerticalGroup(
            sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortingPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(sortingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortColmCB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortOrderCB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane)
                            .addComponent(jTabbedPane1)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(553, 553, 553)
                        .addComponent(mainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(sortingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addRecordbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecordbtnActionPerformed
        DefaultTableModel modelTable
                = (DefaultTableModel) autoTable.getModel();
        String carIdStr = carIdTF.getText();
        String modelName = modelNameTF.getText();
        String brandName = brandNameTF.getText();
        String manufacturer = manufacturerTF.getText();
        String seatCapacityStr = seatCapacityTF.getText();
        String vinNum = vinNumberTF.getText();
        String displacementStr = displacementTF.getText();
        String fuelType = fuelTypeCB.getSelectedItem().toString();
        String transmissionType = transmissionTypeCB.getSelectedItem().toString();
        String bodyType = bodyTypeCB.getSelectedItem().toString();
        String priceStr = priceTF.getText();

        int carId;
        int seatCapacity;
        int displacement;
        int price;

        // Check if fields empty
        if (carIdTF.getBorder().equals(new LineBorder(Color.RED)) || modelNameTF.getBorder().equals(Color.RED)
                || brandNameTF.getBorder().equals(Color.RED) || manufacturerTF.getBorder().equals(Color.RED)
                || seatCapacityTF.getBorder().equals(Color.RED) || vinNumberTF.getBorder().equals(Color.RED) || 
                displacementTF.getBorder().equals(Color.RED) || priceTF.getBorder().equals(Color.RED)) {
            carIdTF.setBorder(null);
            modelNameTF.setBorder(null);
            brandNameTF.setBorder(null);
            manufacturerTF.setBorder(null);
            seatCapacityTF.setBorder(null);
            vinNumberTF.setBorder(null);
            displacementTF.setBorder(null);
            priceTF.setBorder(null);
            System.out.println("gayo");
        }
        
        if (carIdStr.isBlank() && modelName.isBlank() && brandName.isBlank() && manufacturer.isBlank()
                && seatCapacityStr.isBlank() && vinNum.isBlank() && displacementStr.isBlank() && priceStr.isBlank()) {

            carIdTF.setBorder(new LineBorder(Color.RED));
            modelNameTF.setBorder(new LineBorder(Color.RED));
            brandNameTF.setBorder(new LineBorder(Color.RED));
            manufacturerTF.setBorder(new LineBorder(Color.RED));
            seatCapacityTF.setBorder(new LineBorder(Color.RED));
            vinNumberTF.setBorder(new LineBorder(Color.RED));
            displacementTF.setBorder(new LineBorder(Color.RED));
            priceTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Some fields are empty. Please fill required information.", "Error! Some fields are empty or blank.", JOptionPane.INFORMATION_MESSAGE);

        } else if (carIdStr.isBlank() || symbolValidate(carIdStr)) {
            carIdTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used, please fill car Id.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (modelName.isBlank() || symbolValidate(modelName)) {
            modelNameTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used,please fill model Name.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (brandName.isBlank() || symbolValidate(brandName)) {
            brandNameTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used,please fill brand name.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (manufacturer.isBlank() || symbolValidate(manufacturer)) {
            manufacturerTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used, please fill manufacturer.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (seatCapacityStr.isBlank() || symbolValidate(seatCapacityStr)) {
            seatCapacityTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used,please fill seat capacity.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (vinNum.isBlank() || symbolValidate(vinNum)) {
            vinNumberTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used,please fill vin number.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (displacementStr.isBlank() || symbolValidate(displacementStr)) {
            displacementTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used,please fill displacement.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (transmissionType.isBlank()) {
            transmissionTypeCB.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used,please fill transmission.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (bodyType.isBlank()) {
            carIdTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used,please fill body type.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else if (priceStr.isBlank() || symbolValidate(priceStr)) {
            priceTF.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank or special character is used,please fill price.", "Text field are empty!", JOptionPane.ERROR_MESSAGE);
        } else {

            try {
                carId = Integer.parseInt(carIdStr);
                seatCapacity = Integer.parseInt(seatCapacityStr);
                displacement = Integer.parseInt(displacementStr);
                price = Integer.parseInt(priceStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "The input should of numeric value", "Illegal input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (carId <= 0 || seatCapacity <= 0 || displacement <= 0 || price <= 0 || price < 0) {
                JOptionPane.showMessageDialog(null, "Incorrect Data received. Please fill in all the correct information. Check fields car id, seat capacity, displacement and price.", "Please fill all the values correctly! ", JOptionPane.WARNING_MESSAGE);
            } else if (seatCapacity <= 2 || seatCapacity >= 25) {
                JOptionPane.showMessageDialog(null, """
                            Incorrect Data received. Please fill in the correct information. Check field seat capacity.
                            Note: seat capacity should be around 2 to 25.""", "Please fill all the value correctly! ",
                        JOptionPane.ERROR_MESSAGE);
            } else if (displacement < 600 || displacement > 8500) {
                JOptionPane.showMessageDialog(null, """
                            Incorrect Data received. Please fill in the correct information. Check field displacement.
                            Note: displacement should be around 600 to 8500.""", "Please fill all the value correctly! ",
                        JOptionPane.ERROR_MESSAGE);
            //validate price    
            } else if (price < 700 || price > 1_000_000) {
                JOptionPane.showMessageDialog(null, """
                            Incorrect Data received. Please fill in the correct information. Check field price.
                            Note: price should be around 700 to 1,000,000.""", "Please fill all the value correctly! ",
                        JOptionPane.ERROR_MESSAGE);
            } else {

                //check the id and assign the boolean value for if condition.
                boolean checkCar = carIdCheck(carId);

                if (!(checkCar)
                        || symbolValidate(carIdStr)
                        || symbolValidate(modelName)
                        || symbolValidate(brandName)
                        || symbolValidate(manufacturer)
                        || symbolValidate(seatCapacityStr)
                        || symbolValidate(vinNum)
                        || symbolValidate(displacementStr)
                        || symbolValidate(priceStr)) {
                    modelTable.addRow(new Object[]{
                        carId,
                        modelName,
                        brandName,
                        manufacturer,
                        seatCapacity,
                        vinNum,
                        displacement,
                        fuelType,
                        transmissionType,
                        bodyType,
                        price});
                } else {
                    JOptionPane.showMessageDialog(null, "Data entered for Car Id is already used.", "Car Id Already Exists!", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_addRecordbtnActionPerformed

    private void updateRecordbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRecordbtnActionPerformed
        String carIdStr = carIdTFInUD.getText();
        String modelName = modelNameTFInUD.getText();
        String brandName = brandNameTFInUD.getText();
        String manufacturer = manufacturerTFInUD.getText();
        String seatCapacityStr = seatCapacityTFInUD.getText();
        String vinNum = vinNumberTFInUD.getText();
        String displacementStr = displacementTFInUD.getText();
        String fuelType = fuelTypeCBInUD.getSelectedItem().toString();
        String transmissionType = transmissionTypeCBInUD.getSelectedItem().toString();
        String bodyType = bodyTypeCBInUD.getSelectedItem().toString();
        String priceStr = priceTFInUD.getText();

        int carId;
        int seatCapacity;
        int displacement;
        int price;

        if (carIdStr.isBlank() && modelName.isBlank() && brandName.isBlank() && manufacturer.isBlank() && seatCapacityStr.isBlank()
                && vinNum.isBlank() && displacementStr.isBlank() && fuelType.isBlank() && transmissionType.isBlank()
                && bodyType.isBlank() && priceStr.isBlank()) {
            JOptionPane.showMessageDialog(null, "Text field are blank please fill.", "Some fields are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (carIdStr.isBlank() || symbolValidate(carIdStr)) {
            carIdTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill car Id.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (modelName.isBlank() || symbolValidate(modelName)) {
            modelNameTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill model Name.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (brandName.isBlank() || symbolValidate(brandName)) {
            brandNameTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill brand name.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (manufacturer.isBlank() || symbolValidate(manufacturer)) {
            manufacturerTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill manufacturer.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (seatCapacityStr.isBlank() || symbolValidate(seatCapacityStr)) {
            seatCapacityTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill seat capacity.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (vinNum.isBlank() || symbolValidate(vinNum)) {
            vinNumberTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill vin number.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (displacementStr.isBlank() || symbolValidate(displacementStr)) {
            displacementTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill displacement.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (transmissionType.isBlank()) {
            transmissionTypeCBInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill transmission.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (bodyType.isBlank()) {
            carIdTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill body type.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else if (priceStr.isBlank() || symbolValidate(priceStr)) {
            priceTFInUD.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Text field is blank please fill price.", "Text field are empty!", JOptionPane.WARNING_MESSAGE);
        } else {

            try {
                carId = Integer.parseInt(carIdStr);
                seatCapacity = Integer.parseInt(seatCapacityStr);
                displacement = Integer.parseInt(displacementStr);
                price = Integer.parseInt(priceStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "The input should of numeric value", "Illegal input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (carId <= 0 || seatCapacity <= 0 || displacement <= 0 || price <= 0 || price < 500) {
                JOptionPane.showMessageDialog(null,
                        "Incorrect Data received. Please fill in all the correct information. Check fields car id, seat capacity, displacement and price.",
                        "Please fill all the values correctly! ", JOptionPane.ERROR_MESSAGE);
            }
            //check the id and assign the boolean value for if condition.
            boolean checkCar = carIdCheck(carId);

            if (checkCar) {

                String confirmation = JOptionPane.showInputDialog(
                        this,
                        "Car Id: " + carId + "\n"
                        + "Model Name: " + modelName + " | Brand Name: " + brandName + " | Manufracturer: " + manufacturer + "\n"
                        + "Seat capacity: " + seatCapacity + " | vin Num: " + vinNum + " | Displacement : " + displacementStr
                        + "Fuel type : " + fuelType + "\n" + " | Transmission Type: " + transmissionType + " | Body type: " + bodyType + " | Price: " + priceStr + "\n"
                        + " Type " + "\"yes\"" + " for Confirmation to update",
                        "Confirmation prompt",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        null,
                        "").toString().toLowerCase();

                if (confirmation.equals("yes")) {
                    // Update row in table
                    DefaultTableModel tabMdl = (DefaultTableModel) autoTable.getModel();
                    for (int i = 0; i < tabMdl.getRowCount(); i++) {
                        int idCheckInLoop = Integer.parseInt(tabMdl.getValueAt(i, 0).toString());
                        if (idCheckInLoop == carId) {
                            // Update row in table
                            tabMdl.setValueAt(modelName, i, 1);
                            tabMdl.setValueAt(brandName, i, 2);
                            tabMdl.setValueAt(manufacturer, i, 3);
                            tabMdl.setValueAt(seatCapacity, i, 4);
                            tabMdl.setValueAt(vinNum, i, 5);
                            tabMdl.setValueAt(displacement, i, 6);
                            tabMdl.setValueAt(fuelType, i, 7);
                            tabMdl.setValueAt(transmissionType, i, 8);
                            tabMdl.setValueAt(bodyType, i, 9);
                            tabMdl.setValueAt(price, i, 10);
                            // After Sucessful message is shown
                            JOptionPane.showMessageDialog(this, "Your data has been saved.", "Successfully Updated!", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "The Car ID you have enter " + carId + " is not found.", "Car Id not found!", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_updateRecordbtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        String check = carIdTFdelt.getText();
        //validates symbol
        symbolValidate(check);
        byte hasCheck = 0;
        int checkInt;
        if (!check.isBlank()) {
            try {
                checkInt = Integer.parseInt(check);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "The input should of numeric value", "Illegal input",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!(checkInt < 0) && !(symbolValidate(check))) {
                DefaultTableModel modelTable = (DefaultTableModel) autoTable.getModel();
                int size = modelTable.getRowCount() - 1;
                for (int j = 0; j < size; j++) {
                    int checker = Integer.parseInt(modelTable.getValueAt(j, 0).toString());
                    if (checker == checkInt) {
                        modelTable.removeRow(checkInt - 1);
                        hasCheck = 1;
                        carIdTFdelt.setText("");
                        break;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "The car Id entered is less than 0.", "Negative value received!", JOptionPane.WARNING_MESSAGE);
                hasCheck = 1;
            }
            if (hasCheck == 0) {
                JOptionPane.showMessageDialog(null, "The car Id entered is not found.", "Could not find the value to delete.", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No Data received.", "Please fill the values! ", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        int Key;
        String searchOf = searchColmCB.getSelectedItem().toString();
        BinarySearchAlgorithm bi = new BinarySearchAlgorithm();
        initializeDatas();
       
        if (searchOf.equals("Price")) {
            try {
                Key = Integer.parseInt(searchTextField.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid Input received, please fill the search with appropriate data.", "Invalid Input!", JOptionPane.ERROR_MESSAGE);
                return;
            }

            initializeDatas();
            InsertionSort is = new InsertionSort();
            arrayForSort = is.insertionSortAscPrice(arrayForSort);

            int outcome = (int) bi.searchModelInt(arrayForSort, 0, arrayForSort.length - 1, Key);

            if (!(outcome == -1)) {
                DefaultTableModel tModel = (DefaultTableModel) autoTable.getModel();
                // Removing all the rows
                tModel.setRowCount(0);

                tModel.addRow(new Object[]{
                    arrayForSort[outcome].getCar_Id(),
                    arrayForSort[outcome].getModel_name(),
                    arrayForSort[outcome].getModel_brand(),
                    arrayForSort[outcome].getManufracturer(),
                    arrayForSort[outcome].getSeat_capacity(),
                    arrayForSort[outcome].getVin_number(),
                    arrayForSort[outcome].getDisplacement_cc(),
                    arrayForSort[outcome].getFuel_type(),
                    arrayForSort[outcome].getTransmission_type(),
                    arrayForSort[outcome].getBody_type(),
                    arrayForSort[outcome].getPrice()
                });
            }
        } else if (searchOf.equals("Model Name")) {
            String srchKey = searchTextField.getText().toLowerCase();

            if (!(symbolValidate(srchKey))) {
                initializeDatas();
                SelectionSort ss = new SelectionSort();
                arrayForSort = ss.selectionSortByModel(arrayForSort);

                int otcome = (int) bi.searchStringModel(arrayForSort, 0, arrayForSort.length - 1, srchKey);

                if (!(otcome == -1)) {
                    DefaultTableModel tModel = (DefaultTableModel) autoTable.getModel();
                    // Removing all the rows
                    tModel.setRowCount(0);
                    // adds new row of search
                    tModel.addRow(new Object[]{
                        arrayForSort[otcome].getCar_Id(),
                        arrayForSort[otcome].getModel_name(),
                        arrayForSort[otcome].getModel_brand(),
                        arrayForSort[otcome].getManufracturer(),
                        arrayForSort[otcome].getSeat_capacity(),
                        arrayForSort[otcome].getVin_number(),
                        arrayForSort[otcome].getDisplacement_cc(),
                        arrayForSort[otcome].getFuel_type(),
                        arrayForSort[otcome].getTransmission_type(),
                        arrayForSort[otcome].getBody_type(),
                        arrayForSort[otcome].getPrice()
                    });
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid data found in the system.",
                            "Invalid Input!", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBtnActionPerformed
        initializeDatas();
        String sortType = sortOrderCB.getSelectedItem().toString();
        String sortOf = sortColmCB.getSelectedItem().toString();

        InsertionSort is = new InsertionSort();
        SelectionSort SelectSort = new SelectionSort();
        //switch to handle sort type and column
        switch (sortOf) {
            case "Car Id - Insertion Sort" -> {
                if (sortType.equals("Ascend")) {
                    arrayForSort = is.insertionSortAscmodel(arrayForSort);

                    updateInTable();
                } else {
                    arrayForSort = is.insertionSortDescModel(arrayForSort);

                    updateInTable();
                }
            }
            case "Model Name - Selection Sort" -> {
                if (sortType.equals("Ascend")) {
                    arrayForSort = SelectSort.selectionSortByModel(arrayForSort);

                    updateInTable();
                } else {
                    arrayForSort = SelectSort.selectionSortByModelDesc(arrayForSort);

                    updateInTable();
                }
            }
            case "Brand Name - Selection Sort" -> {
                if (sortType.equals("Ascend")) {
                    arrayForSort = SelectSort.selectionSortByBrand(arrayForSort);

                    updateInTable();
                } else {
                    arrayForSort = SelectSort.selectionSortByBrandDesc(arrayForSort);

                    updateInTable();
                }
            }
            case "Price - Insertion Sort" -> {
                if (sortType.equals("Ascend")) {
                    arrayForSort = is.insertionSortAscPrice(arrayForSort);

                    updateInTable();
                } else {
                    arrayForSort = is.insertionSortDescPrice(arrayForSort);

                    updateInTable();
                }
            }
            default -> {
            }
        }
    }//GEN-LAST:event_sortBtnActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        //Resets the table to previous data
        InsertionSort is = new InsertionSort();
        is.insertionSortAscPrice(arrayForSort);
        updateInTable();
    }//GEN-LAST:event_searchTextFieldKeyPressed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarInfoDisplay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarInfoDisplay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarInfoDisplay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarInfoDisplay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarInfoDisplay().setVisible(true);
            }
        });
    }

    //carId checking method
    private boolean carIdCheck(int iD) {
        DefaultTableModel tModel = (DefaultTableModel) autoTable.getModel();
        for (int i = 0; i < tModel.getRowCount(); i++) {
            String carIdCheck = tModel.getValueAt(i, 0).toString();
            int carIdChecker = Integer.parseInt(carIdCheck);
            if (iD == carIdChecker) {
                return true;
            }
        }
        return false;
    }

    //updates the table with setting 0 rows and loop to add new data to table 
    private void updateInTable() {
        DefaultTableModel tModel = (DefaultTableModel) autoTable.getModel();
        // Removing all the rows
        tModel.setRowCount(0);

        for (AutomobilesModel cars : arrayForSort) {
            tModel.addRow(new Object[]{
                cars.getCar_Id(),
                cars.getModel_name(),
                cars.getModel_brand(),
                cars.getManufracturer(),
                cars.getSeat_capacity(),
                cars.getVin_number(),
                cars.getDisplacement_cc(),
                cars.getFuel_type(),
                cars.getTransmission_type(),
                cars.getBody_type(),
                cars.getPrice()
            });
        }
    }

    //validates the symbol with char value to int to check
    private boolean symbolValidate(String n) {

        // variable that stores the integer value of the character  (32 - 47 | 58 - 64 | 91 - 96 | 123 - 126)
        int[][] ranges = {
            {33, 47},
            {58, 64},
            {91, 96},
            {123, 126}
        };

        // Calculate the total size of the array and Create the array
        int totalSize = 0;
        for (int[] range : ranges) {
            totalSize += range[1] - range[0] + 1;
        }
        int[] intArray = new int[totalSize];

        // assign value in the array
        int currentIndex = 0;
        for (int[] range : ranges) {
            for (int i = range[0]; i <= range[1]; i++) {
                intArray[currentIndex++] = i;
            }
        }

        //Get the length of the string using the length method
        int length = n.length();

        //loop to iterate over each char in string
        for (int i = 0; i < length; i++) {
            //Use the charAt() method to get the character at the current index
            int currentChar = (int) n.charAt(i);
            for (int j = 0; j < intArray.length; j++) {
                if (currentChar == intArray[j]) {
                    System.out.println("Validation error");
                    return true;
                }
            }
        }
        return false;
    }
    
    private void initializeDatas() {
        // Initialize the model with data from the table
        arrayForSort = new AutomobilesModel[autoTable.getRowCount()];

        for (int i = 0; i < autoTable.getRowCount(); i++) {
            int carId = Integer.parseInt(autoTable.getValueAt(i, 0).toString());
            String modelName = autoTable.getValueAt(i, 1).toString();
            String brandName = autoTable.getValueAt(i, 2).toString();
            String manufacturer = autoTable.getValueAt(i, 3).toString();
            int seatCapacity = Integer.parseInt(autoTable.getValueAt(i, 4).toString());
            String vinNum = autoTable.getValueAt(i, 5).toString();
            int displacement = Integer.parseInt(autoTable.getValueAt(i, 6).toString());
            String fuelType = autoTable.getValueAt(i, 7).toString();
            String transmissionType = autoTable.getValueAt(i, 8).toString();
            String bodyType = autoTable.getValueAt(i, 9).toString();
            int price = Integer.parseInt(autoTable.getValueAt(i, 10).toString());

            arrayForSort[i] = new AutomobilesModel(carId, modelName, brandName, manufacturer, seatCapacity, vinNum, displacement, fuelType, transmissionType, bodyType, price);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRecordbtn;
    private javax.swing.JTable autoTable;
    private javax.swing.JLabel bodyTypTextInCD;
    private javax.swing.JLabel bodyTypTextInCD1;
    public javax.swing.JComboBox<String> bodyTypeCB;
    public javax.swing.JComboBox<String> bodyTypeCBInUD;
    public javax.swing.JTextField brandNameTF;
    public javax.swing.JTextField brandNameTFInUD;
    private javax.swing.JLabel brandNameTextInCD;
    private javax.swing.JLabel brandNameTextInCD1;
    public javax.swing.JTextField carIdTF;
    public javax.swing.JTextField carIdTFInUD;
    public javax.swing.JTextField carIdTFdelt;
    private javax.swing.JLabel carIdTextInCD;
    private javax.swing.JLabel carIdTextInCD1;
    private javax.swing.JLabel carIdTextLbl;
    private javax.swing.JPanel createDataPanel;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel deletePanel;
    private javax.swing.JLabel deleteRecLabel;
    public javax.swing.JTextField displacementTF;
    public javax.swing.JTextField displacementTFInUD;
    private javax.swing.JLabel displacementTextInCD;
    private javax.swing.JLabel displacementTextInCD1;
    private javax.swing.JLabel fuelTypTextInCD;
    private javax.swing.JLabel fuelTypTextInCD1;
    public javax.swing.JComboBox<String> fuelTypeCB;
    public javax.swing.JComboBox<String> fuelTypeCBInUD;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JPanel mainPanel;
    public javax.swing.JTextField manufacturerTF;
    public javax.swing.JTextField manufacturerTFInUD;
    private javax.swing.JLabel manufractureTextInCD;
    private javax.swing.JLabel manufractureTextInCD1;
    public javax.swing.JTextField modelNameTF;
    public javax.swing.JTextField modelNameTFInUD;
    private javax.swing.JLabel modelNameTextInCD;
    private javax.swing.JLabel modelNameTextInCD1;
    public javax.swing.JTextField priceTF;
    public javax.swing.JTextField priceTFInUD;
    private javax.swing.JLabel priceTextInCD;
    private javax.swing.JLabel priceTextInCD1;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> searchColmCB;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel seatCapTextInCD;
    private javax.swing.JLabel seatCapTextInCD1;
    public javax.swing.JTextField seatCapacityTF;
    public javax.swing.JTextField seatCapacityTFInUD;
    private javax.swing.JButton sortBtn;
    private javax.swing.JComboBox<String> sortColmCB;
    private javax.swing.JComboBox<String> sortOrderCB;
    private javax.swing.JPanel sortingPanel;
    private javax.swing.JLabel transmissionTypTextInCD;
    private javax.swing.JLabel transmissionTypTextInCD1;
    public javax.swing.JComboBox<String> transmissionTypeCB;
    public javax.swing.JComboBox<String> transmissionTypeCBInUD;
    private javax.swing.JPanel updateDataPanel;
    private javax.swing.JButton updateRecordbtn;
    private javax.swing.JLabel vinNumTextInCD;
    private javax.swing.JLabel vinNumTextInCD1;
    public javax.swing.JTextField vinNumberTF;
    public javax.swing.JTextField vinNumberTFInUD;
    // End of variables declaration//GEN-END:variables
}